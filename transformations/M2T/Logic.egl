package logic;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.enterprise.inject.Default;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.util.List;

import entity.Vehiculo;
import entity.Contribuyente;
import entity.Pago;

@Default
@Stateless
@LocalBean
public class Logic implements ILogic {
    
    @PersistenceContext(unitName="VehiculoPU")
    protected EntityManager entityManager;
    
    [* Aqui es din치mico *]
    [%for(logic in app.backend.logics) {%]
		[% for(method in logic.methods) {%]
			[% if(method.name == 'getVehiculo') {%]
				[% var countParams = method.parameters.size(); var actualParam = 1; %]
	public Vehiculo getVehiculo(
				[% for(param in method.parameters) {%]
	[%= param.type%] [%= param.name.replace(' ', '').toLowerCase()%]
					[% if(actualParam < countParams) {%]
					,
					[%}
					actualParam = actualParam + 1;%]
				[%}%]
	) {
			[%}%]
		[%}%]
	[%}%]
	[%for(logic in app.backend.logics) {%]
		[% for(method in logic.methods) {%]
			[% if(method.name == 'getVehiculo') {%]
				[% var countParams = method.parameters.size(); var actualParam = 1; %]
	Query q = entityManager.createQuery("select u from Vehiculo u where " +
				[% for(param in method.parameters) {%]
	"u.[%= param.name.replace(' ', '').toLowerCase()%] = '" + [%= param.name.replace(' ', '').toLowerCase()%] + "'"
					[% if(actualParam < countParams) {%]
					+ " AND " + 
					[%}
					actualParam = actualParam + 1;%]
				[%}%]
	);
	List<Vehiculo> vehiculos = q.getResultList();
    return vehiculos.get(0);
    }
			[%}%]
		[%}%]
	[%}%]
    [* / Aqui es din치mico *]
    
    public Vehiculo updateVehiculo(Vehiculo vehiculo) {
        return entityManager.merge(vehiculo);
    }
    
    public Contribuyente getContribuyente(Long id) {
        return entityManager.find(Contribuyente.class, id);
    }
    
    public Contribuyente updateContribuyente(Contribuyente contribuyente) {
        return entityManager.merge(contribuyente);
    }
    
    public Pago createPago(Pago pago) {
        entityManager.persist(pago);
        return pago;
    }
    
    public List consultarPagosPendientes() {
        return consultarPagos("");
    }
    
    public List consultarPagosRealizados() {
        return consultarPagos(" not");
    }
    
    [* Aqui es din치mico *]
    private List consultarPagos(String value) {
    	String query = "select [%for(entity in app.backend.entities) {%][%if(entity.name == 'Contribuyente' or entity.name == 'Vehiculo') {%][% for(attrib in entity.attributes) {%][%=entity.name.replace(' ', '').toLowerCase()%].[%= attrib.name.replace(' ', '').toLowerCase()%],[%}%]
		[%}%][%}%]
 pago.fecha, pago.valor from vehiculo inner join contribuyente on vehiculo.idcontribuyente = contribuyente.id left join pago on vehiculo.id = pago.idvehiculo\n" +
        "where pago.idvehiculo is" + value +" null";
        Query q = entityManager.createNativeQuery(query);
        return q.getResultList();
    }
    [* / Aqui es din치mico *]
}
